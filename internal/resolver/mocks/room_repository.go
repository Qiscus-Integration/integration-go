// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "integration-go/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// RoomRepository is an autogenerated mock type for the RoomRepository type
type RoomRepository struct {
	mock.Mock
}

// DeleteBy provides a mock function with given fields: ctx, query
func (_m *RoomRepository) DeleteBy(ctx context.Context, query map[string]interface{}) error {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *RoomRepository) Fetch(ctx context.Context) ([]*entity.Room, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*entity.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Room, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Room); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoomRepository creates a new instance of RoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomRepository {
	mock := &RoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "integration-go/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// RoomRepository is an autogenerated mock type for the RoomRepository type
type RoomRepository struct {
	mock.Mock
}

type RoomRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RoomRepository) EXPECT() *RoomRepository_Expecter {
	return &RoomRepository_Expecter{mock: &_m.Mock}
}

// DeleteBy provides a mock function with given fields: ctx, query
func (_m *RoomRepository) DeleteBy(ctx context.Context, query map[string]interface{}) error {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomRepository_DeleteBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBy'
type RoomRepository_DeleteBy_Call struct {
	*mock.Call
}

// DeleteBy is a helper method to define mock.On call
//   - ctx context.Context
//   - query map[string]interface{}
func (_e *RoomRepository_Expecter) DeleteBy(ctx interface{}, query interface{}) *RoomRepository_DeleteBy_Call {
	return &RoomRepository_DeleteBy_Call{Call: _e.mock.On("DeleteBy", ctx, query)}
}

func (_c *RoomRepository_DeleteBy_Call) Run(run func(ctx context.Context, query map[string]interface{})) *RoomRepository_DeleteBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *RoomRepository_DeleteBy_Call) Return(_a0 error) *RoomRepository_DeleteBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoomRepository_DeleteBy_Call) RunAndReturn(run func(context.Context, map[string]interface{}) error) *RoomRepository_DeleteBy_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: ctx
func (_m *RoomRepository) Fetch(ctx context.Context) ([]*entity.Room, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*entity.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Room, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Room); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomRepository_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type RoomRepository_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoomRepository_Expecter) Fetch(ctx interface{}) *RoomRepository_Fetch_Call {
	return &RoomRepository_Fetch_Call{Call: _e.mock.On("Fetch", ctx)}
}

func (_c *RoomRepository_Fetch_Call) Run(run func(ctx context.Context)) *RoomRepository_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoomRepository_Fetch_Call) Return(_a0 []*entity.Room, _a1 error) *RoomRepository_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomRepository_Fetch_Call) RunAndReturn(run func(context.Context) ([]*entity.Room, error)) *RoomRepository_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoomRepository creates a new instance of RoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomRepository {
	mock := &RoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Omnichannel is an autogenerated mock type for the Omnichannel type
type Omnichannel struct {
	mock.Mock
}

type Omnichannel_Expecter struct {
	mock *mock.Mock
}

func (_m *Omnichannel) EXPECT() *Omnichannel_Expecter {
	return &Omnichannel_Expecter{mock: &_m.Mock}
}

// CreateRoomTag provides a mock function with given fields: ctx, roomID, tag
func (_m *Omnichannel) CreateRoomTag(ctx context.Context, roomID string, tag string) error {
	ret := _m.Called(ctx, roomID, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoomTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Omnichannel_CreateRoomTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoomTag'
type Omnichannel_CreateRoomTag_Call struct {
	*mock.Call
}

// CreateRoomTag is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - tag string
func (_e *Omnichannel_Expecter) CreateRoomTag(ctx interface{}, roomID interface{}, tag interface{}) *Omnichannel_CreateRoomTag_Call {
	return &Omnichannel_CreateRoomTag_Call{Call: _e.mock.On("CreateRoomTag", ctx, roomID, tag)}
}

func (_c *Omnichannel_CreateRoomTag_Call) Run(run func(ctx context.Context, roomID string, tag string)) *Omnichannel_CreateRoomTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Omnichannel_CreateRoomTag_Call) Return(_a0 error) *Omnichannel_CreateRoomTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Omnichannel_CreateRoomTag_Call) RunAndReturn(run func(context.Context, string, string) error) *Omnichannel_CreateRoomTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewOmnichannel creates a new instance of Omnichannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOmnichannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *Omnichannel {
	mock := &Omnichannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

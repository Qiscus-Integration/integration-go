// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CheckDatabase provides a mock function with given fields: ctx
func (_m *Repository) CheckDatabase(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CheckDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDatabase'
type Repository_CheckDatabase_Call struct {
	*mock.Call
}

// CheckDatabase is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) CheckDatabase(ctx interface{}) *Repository_CheckDatabase_Call {
	return &Repository_CheckDatabase_Call{Call: _e.mock.On("CheckDatabase", ctx)}
}

func (_c *Repository_CheckDatabase_Call) Run(run func(ctx context.Context)) *Repository_CheckDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_CheckDatabase_Call) Return(_a0 error) *Repository_CheckDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CheckDatabase_Call) RunAndReturn(run func(context.Context) error) *Repository_CheckDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRedis provides a mock function with given fields: ctx
func (_m *Repository) CheckRedis(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckRedis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CheckRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRedis'
type Repository_CheckRedis_Call struct {
	*mock.Call
}

// CheckRedis is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) CheckRedis(ctx interface{}) *Repository_CheckRedis_Call {
	return &Repository_CheckRedis_Call{Call: _e.mock.On("CheckRedis", ctx)}
}

func (_c *Repository_CheckRedis_Call) Run(run func(ctx context.Context)) *Repository_CheckRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_CheckRedis_Call) Return(_a0 error) *Repository_CheckRedis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CheckRedis_Call) RunAndReturn(run func(context.Context) error) *Repository_CheckRedis_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
